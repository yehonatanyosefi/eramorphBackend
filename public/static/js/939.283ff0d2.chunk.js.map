{"version":3,"file":"static/js/939.283ff0d2.chunk.js","mappings":"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","sources":["cmps/Pose.jsx","views/Yoga.jsx"],"sourcesContent":["// Importing necessary hooks from React and machine learning model ml5\r\nimport { useState, useMemo, useRef, useEffect } from 'react'\r\n// import * as ml5 from 'ml5'\r\nimport Sketch from 'react-p5'\r\n\r\n// Define base URL for images and poses data\r\nconst PUBLIC_URL = process.env.PUBLIC_URL\r\nconst poses = [\r\n\t{ pose: 'Mountain', imgSrc: `${PUBLIC_URL}/imgs/mountain.svg` },\r\n\t{ pose: 'Tree', imgSrc: `${PUBLIC_URL}/imgs/tree.svg` },\r\n\t{ pose: 'Downward Dog', imgSrc: `${PUBLIC_URL}/imgs/dog.svg` },\r\n\t{ pose: 'Warrior I', imgSrc: `${PUBLIC_URL}/imgs/warrior1.svg` },\r\n\t{ pose: 'Warrior II', imgSrc: `${PUBLIC_URL}/imgs/warrior2.svg` },\r\n\t{ pose: 'Chair', imgSrc: `${PUBLIC_URL}/imgs/chair.svg` },\r\n]\r\n\r\n// Define constants for poses interval and duration\r\nconst POSES_INTERVAL = 100\r\nconst POSES_TIME = 10 * 1000\r\nconst TOTAL_POSES_CHECKS = POSES_TIME / POSES_INTERVAL\r\n\r\nconst Pose = () => {\r\n\t// Mounting ml5 minified\r\n\tuseEffect(() => {\r\n\t\tconst script = document.createElement('script')\r\n\t\tscript.src = `${PUBLIC_URL}/lib/ml5.min.js`\r\n\t\tscript.async = true\r\n\r\n\t\tscript.onload = () => {\r\n\t\t\t// set state to update component after the script is loaded\r\n\t\t\tsetIsMl5Loaded(true)\r\n\t\t}\r\n\r\n\t\tdocument.body.appendChild(script)\r\n\r\n\t\t// Cleanup function to remove the script if the component unmounts\r\n\t\treturn () => {\r\n\t\t\tdocument.body.removeChild(script)\r\n\t\t}\r\n\t}, [])\r\n\r\n\t// Declare state variables for the component\r\n\tconst [isMl5Loaded, setIsMl5Loaded] = useState(false)\r\n\tconst [pose, setPose] = useState(null)\r\n\tconst [skeleton, setSkeleton] = useState(null)\r\n\tconst [video, setVideo] = useState(null)\r\n\tconst [posesToDo, setPosesToDo] = useState([])\r\n\tconst [posesTime, setPosesTime] = useState(POSES_TIME)\r\n\tconst [currMessage, setCurrMessage] = useState('')\r\n\tconst [isModelLoaded, setIsYogaLoaded] = useState(false)\r\n\tconst [isPoseNetLoaded, setIsPoseNetLoaded] = useState(false)\r\n\tconst [currPose, setCurrPose] = useState('')\r\n\tconst [gamePhase, setGamePhase] = useState('loading')\r\n\tconst [timerId, setTimerId] = useState(null)\r\n\r\n\t// useRef hooks to store mutable values that survive re-renders\r\n\tconst posesArray = useRef([])\r\n\tconst isGameOn = useRef(false)\r\n\tconst brainRef = useRef(null)\r\n\r\n\t// useMemo hooks to optimize performance by memoizing complex computations\r\n\tconst disabledBtn = useMemo(\r\n\t\t() => !isPoseNetLoaded || !isModelLoaded || gamePhase === 'Ended',\r\n\t\t[isPoseNetLoaded, isModelLoaded, gamePhase]\r\n\t)\r\n\tconst btnTxt = useMemo(() => {\r\n\t\tif (!isPoseNetLoaded || !isModelLoaded) return 'Loading...'\r\n\t\tif (gamePhase === 'teaching') return 'Start Teaching'\r\n\t\treturn 'Start Game'\r\n\t\t// Conditionals for button text based on model loading status and game phase\r\n\t}, [isPoseNetLoaded, isModelLoaded, gamePhase])\r\n\r\n\t// Handles the setup of the poses\r\n\tconst handlePosesSetup = () => {\r\n\t\tsetPosesToDo(posesArray.current)\r\n\t\tposesArray.current = []\r\n\t\tsetCurrMessage(`Let's start, you need to repeat the last video`)\r\n\t}\r\n\r\n\t// useEffect to initialize game phase\r\n\tuseEffect(() => {\r\n\t\tsetGamePhase('teaching')\r\n\t}, [])\r\n\r\n\t// Handles start of the game/teaching phase\r\n\tconst handleStart = () => {\r\n\t\tif (!isPoseNetLoaded || !isModelLoaded) return setCurrMessage('Still Loading...')\r\n\t\tconsole.log(gamePhase)\r\n\t\tif (gamePhase === 'teaching') {\r\n\t\t\t// If we're in the 'teaching' phase, transition to 'testing'\r\n\t\t\tsetCurrMessage(`Let's start, you have 10 seconds to do any pose you like`)\r\n\t\t\tsetGamePhase('testing')\r\n\t\t\tclassifyPose()\r\n\t\t} else if (gamePhase === 'testing') {\r\n\t\t\t// If we're in the 'testing' phase, start the game\r\n\t\t\tisGameOn.current = true\r\n\t\t\tsetCurrMessage(`Game started! You have 10 seconds to repeat the poses`)\r\n\t\t\tsetGamePhase('Started')\r\n\t\t\tclassifyPose()\r\n\t\t}\r\n\t}\r\n\r\n\t// Sets up video and PoseNet model\r\n\tconst setup = (p5, canvasParentRef) => {\r\n\t\tp5.createCanvas(640, 480).parent(canvasParentRef)\r\n\t\tlet video = p5.createCapture(p5.VIDEO)\r\n\t\tvideo.hide()\r\n\t\tsetVideo(video)\r\n\r\n\t\tlet poseNet = window.ml5.poseNet(video, onModelLoad)\r\n\t\tposeNet.on('pose', (poses) => {\r\n\t\t\tif (poses.length > 0) {\r\n\t\t\t\tsetPose(poses[0].pose)\r\n\t\t\t\tsetSkeleton(poses[0].skeleton)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet options = {\r\n\t\t\tinputs: 34,\r\n\t\t\toutputs: 6,\r\n\t\t\ttask: 'classification',\r\n\t\t\tdebug: true,\r\n\t\t}\r\n\r\n\t\tbrainRef.current = window.ml5.neuralNetwork(options)\r\n\t\tconst modelInfo = {\r\n\t\t\tmodel: `${PUBLIC_URL}/models/model2.json`,\r\n\t\t\tmetadata: `${PUBLIC_URL}/models/model_meta2.json`,\r\n\t\t\tweights: `${PUBLIC_URL}/models/model.weights2.bin`,\r\n\t\t}\r\n\t\tbrainRef.current.load(modelInfo, onYogaLoad)\r\n\t}\r\n\r\n\t// Draws the pose on canvas\r\n\tconst draw = (p5) => {\r\n\t\t//NO useState here\r\n\t\tp5.background(0)\r\n\t\tp5.push()\r\n\t\tp5.translate(video.width, 0)\r\n\t\tp5.scale(-1, 1)\r\n\t\tp5.image(video, 0, 0, video.width, video.height)\r\n\t\tif (pose) {\r\n\t\t\tfor (let i = 0; i < skeleton.length; i++) {\r\n\t\t\t\tlet a = skeleton[i][0]\r\n\t\t\t\tlet b = skeleton[i][1]\r\n\t\t\t\tp5.strokeWeight(2)\r\n\t\t\t\tp5.stroke(244, 194, 194)\r\n\t\t\t\tp5.line(a.position.x, a.position.y, b.position.x, b.position.y)\r\n\t\t\t}\r\n\t\t}\r\n\t\tp5.pop()\r\n\t}\r\n\r\n\t// Callback functions for when the models are loaded\r\n\tconst onYogaLoad = () => {\r\n\t\tsetIsYogaLoaded(true)\r\n\t}\r\n\tconst onModelLoad = () => {\r\n\t\tsetIsPoseNetLoaded(true)\r\n\t}\r\n\r\n\t// Classifies the current pose\r\n\tconst classifyPose = () => {\r\n\t\ttry {\r\n\t\t\tif (pose && skeleton.length) {\r\n\t\t\t\tlet inputs = []\r\n\t\t\t\tfor (let i = 0; i < pose.keypoints.length; i++) {\r\n\t\t\t\t\tlet x = pose.keypoints[i].position.x\r\n\t\t\t\t\tlet y = pose.keypoints[i].position.y\r\n\t\t\t\t\tinputs.push(x)\r\n\t\t\t\t\tinputs.push(y)\r\n\t\t\t\t}\r\n\t\t\t\tbrainRef.current.classify(inputs, gotResults).catch((error) => {\r\n\t\t\t\t\tconsole.error('Classification error:', error)\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\t// console.log('Pose not found')\r\n\t\t\t\tsetCurrPose('Not found')\r\n\t\t\t\tposesArray.current = [...posesArray.current, null]\r\n\t\t\t}\r\n\t\t\thandleGameTik()\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('Caught Error', error)\r\n\t\t}\r\n\t}\r\n\r\n\t// Handles the game timer tick\r\n\tconst handleGameTik = () => {\r\n\t\tsetPosesTime((prevPosesTime) => {\r\n\t\t\tconst newPoseTime = prevPosesTime - POSES_INTERVAL\r\n\r\n\t\t\tif (newPoseTime <= 0) {\r\n\t\t\t\tclearTimeout(timerId)\r\n\t\t\t\tif (!isGameOn.current) handlePosesSetup()\r\n\t\t\t\telse handleGameOver()\r\n\t\t\t\treturn POSES_TIME\r\n\t\t\t} else {\r\n\t\t\t\tconst newTimerId = setTimeout(classifyPose, POSES_INTERVAL)\r\n\t\t\t\tsetTimerId(newTimerId)\r\n\t\t\t\treturn newPoseTime\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t// Handles game over state\r\n\tconst handleGameOver = () => {\r\n\t\tconst successNumber = posesToDo.reduce((acc, curr, i) => {\r\n\t\t\tif (curr === posesArray.current[i]) return acc + 1\r\n\t\t\treturn acc\r\n\t\t}, 0)\r\n\t\tconst successRate = Math.round((successNumber / TOTAL_POSES_CHECKS) * 100)\r\n\t\tsetCurrMessage(`Game ended, your success rate is: ${successRate}%`)\r\n\t\tisGameOn.current = false\r\n\t\tsetGamePhase('Ended')\r\n\t}\r\n\r\n\t// Handles the pose classification results\r\n\tconst gotResults = (error, results) => {\r\n\t\t// console.log(`results:`, results)\r\n\t\tif (error || !results) {\r\n\t\t\tposesArray.current = [...posesArray.current, null]\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (results[0].confidence < 0.7) {\r\n\t\t\tsetCurrPose('Pose not found')\r\n\t\t\tposesArray.current = [...posesArray.current, null]\r\n\t\t} else {\r\n\t\t\tconst poseNum = parseInt(results[0].label)\r\n\t\t\tconst pose = poses[poseNum]\r\n\t\t\tsetCurrPose(pose.pose)\r\n\t\t\tposesArray.current = [...posesArray.current, pose]\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"pose-display\">\r\n\t\t\t<div className=\"pose-list\">\r\n\t\t\t\t{poses.map((pose) => (\r\n\t\t\t\t\t<div key={pose.pose} className=\"pose-item\">\r\n\t\t\t\t\t\t<img src={pose.imgSrc} className=\"pose-img\" alt={`${pose.pose} Pose`} />\r\n\t\t\t\t\t\t<div className=\"pose-name\">{pose.pose}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t{(isGameOn.current || gamePhase === 'testing') && <p className=\"current-pose\">Pose: {currPose}</p>}\r\n\t\t\t{isMl5Loaded && <Sketch setup={setup} draw={draw} className=\"pose-canvas\" />}\r\n\t\t\t<p className=\"message\">{currMessage}</p>\r\n\t\t\t{(isGameOn.current || gamePhase === 'testing') && <p className=\"time\">{posesTime}</p>}\r\n\t\t\t<button\r\n\t\t\t\tonClick={handleStart}\r\n\t\t\t\tdisabled={disabledBtn}\r\n\t\t\t\tclassName={`start-button ${disabledBtn ? 'disabled' : ''}`}>\r\n\t\t\t\t{btnTxt}\r\n\t\t\t</button>\r\n\t\t\t{/* <img src={`${PUBLIC_URL}/imgs/allow.png`} className=\"instruction-img\" /> */}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Pose\r\n","// import MainWrapper from '../cmps/MainWrapper'\r\nimport Pose from '../cmps/Pose'\r\n\r\nexport default function Yoga() {\r\n\treturn (\r\n\t\t// <MainWrapper>\r\n\t\t<div className=\"yoga-app\">\r\n\t\t\t<header className=\"header\">\r\n\t\t\t\t<h1>Yoga</h1>\r\n\t\t\t</header>\r\n\t\t\t<Pose />\r\n\t\t</div>\r\n\t\t// </MainWrapper>\r\n\t)\r\n}\r\n"],"names":["PUBLIC_URL","process","poses","pose","imgSrc","concat","POSES_TIME","useEffect","script","document","createElement","src","async","onload","setIsMl5Loaded","body","appendChild","removeChild","_useState","useState","_useState2","_slicedToArray","isMl5Loaded","_useState3","_useState4","setPose","_useState5","_useState6","skeleton","setSkeleton","_useState7","_useState8","video","setVideo","_useState9","_useState10","posesToDo","setPosesToDo","_useState11","_useState12","posesTime","setPosesTime","_useState13","_useState14","currMessage","setCurrMessage","_useState15","_useState16","isModelLoaded","setIsYogaLoaded","_useState17","_useState18","isPoseNetLoaded","setIsPoseNetLoaded","_useState19","_useState20","currPose","setCurrPose","_useState21","_useState22","gamePhase","setGamePhase","_useState23","_useState24","timerId","setTimerId","posesArray","useRef","isGameOn","brainRef","disabledBtn","useMemo","btnTxt","onYogaLoad","onModelLoad","classifyPose","length","inputs","i","keypoints","x","position","y","push","current","classify","gotResults","catch","error","console","_toConsumableArray","handleGameTik","log","prevPosesTime","newPoseTime","clearTimeout","handleGameOver","newTimerId","setTimeout","successNumber","reduce","acc","curr","successRate","Math","round","results","confidence","poseNum","parseInt","label","_jsxs","className","children","_jsx","map","alt","Sketch","setup","p5","canvasParentRef","createCanvas","parent","createCapture","VIDEO","hide","window","ml5","poseNet","on","neuralNetwork","outputs","task","debug","modelInfo","model","metadata","weights","load","draw","background","translate","width","scale","image","height","a","b","strokeWeight","stroke","line","pop","onClick","disabled","Yoga","Pose"],"sourceRoot":""}